# Server Configuration
server.port=8081
spring.application.name=account-service

# === Atomikos JTA Configuration ===
# Включаем JTA (хотя стартер делает это, явно не помешает)
spring.jta.enabled=true

# --- Atomikos Core Settings (опционально, можно настроить таймауты и логи) ---
spring.jta.atomikos.properties.service=com.atomikos.icatch.standalone.UserTransactionServiceFactory
# Увеличим таймаут транзакции по умолчанию (например, до 300 секунд)
spring.jta.atomikos.properties.max-timeout=300000
spring.jta.atomikos.properties.enable-logging=true
# Уровень логгирования Atomikos (WARN, INFO, DEBUG, TRACE)
# logging.level.com.atomikos=TRACE # Очень подробно, для отладки

# --- Atomikos XA DataSource Configuration (вместо spring.datasource) ---
# Уникальное имя ресурса для Atomikos (важно!)
spring.jta.atomikos.datasource.unique-resource-name=accountPostgresXA
# Класс XA DataSource для PostgreSQL
spring.jta.atomikos.datasource.xa-data-source-class-name=org.postgresql.xa.PGXADataSource
# Свойства для XA DataSource (передаются в PGXADataSource)
spring.jta.atomikos.datasource.xa-properties.user=${POSTGRES_ACCOUNT_USER:account_user}
spring.jta.atomikos.datasource.xa-properties.password=${POSTGRES_ACCOUNT_PASSWORD:your_account_password}
spring.jta.atomikos.datasource.xa-properties.url=${POSTGRES_ACCOUNT_URL:jdbc:postgresql://localhost:5432/account_db}
# Настройки пула соединений для этого DataSource (Atomikos управляет пулом)
spring.jta.atomikos.datasource.max-pool-size=10
spring.jta.atomikos.datasource.min-pool-size=2
# Запрос для проверки соединения
spring.jta.atomikos.datasource.test-query=SELECT 1

# --- Atomikos XA JMS ConnectionFactory Configuration (вместо spring.activemq) ---
# Уникальное имя ресурса для Atomikos (важно!)
spring.jta.atomikos.connectionfactory.unique-resource-name=activemqXA
# Класс XA ConnectionFactory для ActiveMQ
spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name=org.apache.activemq.ActiveMQXAConnectionFactory
# Свойства для XA ConnectionFactory
spring.jta.atomikos.connectionfactory.xa-properties.broker-url=${ACTIVEMQ_BROKER_URL:tcp://localhost:61616}
spring.jta.atomikos.connectionfactory.xa-properties.user=${ACTIVEMQ_USER:}
spring.jta.atomikos.connectionfactory.xa-properties.password=${ACTIVEMQ_PASSWORD:}
# Настройки пула соединений для JMS
spring.jta.atomikos.connectionfactory.max-pool-size=10

# === JPA/Hibernate Configuration ===
# Hibernate должен использовать JTA
spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.AtomikosJtaPlatform
# DDL-auto лучше оставить validate или none в продакшене, update - для разработки
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# === JMS Listener Configuration ===
# Убедимся, что слушатель транзакционный (JTA будет управлять)
# spring.jms.listener.acknowledge-mode=transacted
# Prefetch для слушателя (оптимизация)
spring.activemq.packages.trust-all=true

# Logging
logging.level.root=INFO
logging.level.org.hibernate.SQL=OFF
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=OFF
logging.level.org.springframework.transaction.jta=TRACE
logging.level.org.springframework.jms=DEBUG

# Включаем поддержку DLQ (по умолчанию она включена, но явно не помешает)
spring.activemq.broker.support-dlq=true
# Максимальное количество повторных доставок (например, 2 попыток после первой неудачной)
spring.activemq.redelivery-policy.maximum-redeliveries=2
# Начальная задержка перед первой повторной доставкой (в миллисекундах)
spring.activemq.redelivery-policy.initial-redelivery-delay=1000
# Использовать экспоненциальную задержку (каждая следующая задержка удваивается)
spring.activemq.redelivery-policy.use-exponential-back-off=true
# Множитель для экспоненциальной задержки
spring.activemq.redelivery-policy.back-off-multiplier=2
# Максимальная задержка между попытками (чтобы не росла бесконечно)
spring.activemq.redelivery-policy.maximum-redelivery-delay=60000